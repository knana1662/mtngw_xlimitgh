"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
from os import getcwd, mkdir,getenv,listdir
from glob import iglob
from dotenv import load_dotenv
from socket import gethostbyname,gethostname
from secrets import token_urlsafe,token_hex,token_bytes
from django.views.generic import TemplateView
import sqlite3
from channels.layers import get_channel_layer
from json import loads
from backend.personal_decorators import data_purchasing

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

FILE=getcwd()
ENV_FILE=load_dotenv(BASE_DIR/"ENV_FILE.env")

IP_ADDRESS=gethostbyname(gethostname())

# LIST OF SECRET KEYS
PRODUCTION_SERVER_ALLOWED_HOSTS = getenv("PRODUCTION_SERVER_ALLOWED_HOSTS").split(",")
TEST_SERVER_ALLOWED_HOSTS = getenv("TEST_SERVER_ALLOWED_HOSTS").split(",")
SECRET_KEY = getenv("SECRET_KEY")
POSTGRES_NAME = getenv("POSTGRES_NAME")
POSTGRES_USERNAME = getenv("POSTGRES_USERNAME")
POSTGRES_PASSWORD = getenv("POSTGRES_PASSWORD")
ADMINS=getenv("ADMINS")
EMAIL_SUBJECT_PREFIX = getenv("EMAIL_SUBJECT_PREFIX")
DEFAULT_FROM_EMAIL = getenv("DEFAULT_FROM_EMAIL")
EMAIL_HOST_USER = getenv("EMAIL_HOST_USER")
EMAIL_PASS_KEY_OR_PASSWORD = getenv("EMAIL_PASS_KEY_OR_PASSWORD")
SERVER_EMAIL = getenv("SERVER_EMAIL")

# Define the channel layer configuration
CHANNEL_LAYERS = {

    "redis": {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [
                ('127.0.0.1', 6379),
            ],
        },
    },
    "mem": {
        "BACKEND": "channels.layers.InMemoryChannelLayer",
    },
}


def set_allowed_host_and_debug_mode(test_or_prod_or_none):
    ...

    @data_purchasing
    def set_all_data_bundle():
        ...
        return ([3,5,10,15,20,30,50],600)
    get_all_data_allocations = set_all_data_bundle()



    if test_or_prod_or_none.startswith("p") :
        ...

        return {
            "debug_and_allow_host" :  (False,PRODUCTION_SERVER_ALLOWED_HOSTS),
            "channel_layer" : get_channel_layer("redis").send,
            "test_bundle" : "",
            "get_all_data_allocations" : ['3_GHS__2GB_(24hrs)', '5_GHS__5GB_(24hrs)', '10_GHS__15GB_(3_days)', '15_GHS__20GB_(5_days)', '30_GHS__(Unlimited_24hrs)']


        } 
    
    elif test_or_prod_or_none.startswith("t"):
        ...

        return  {
            "debug_and_allow_host" : (False,TEST_SERVER_ALLOWED_HOSTS),
            "channel_layer" : get_channel_layer("redis").send,
            "test_bundle" : "0.1_GHS__100MB_(24hrs)",
            "get_all_data_allocations" : ['3_GHS__2GB_(24hrs)', '5_GHS__5GB_(24hrs)', '10_GHS__15GB_(3_days)', '15_GHS__20GB_(5_days)', '30_GHS__(Unlimited_24hrs)']

        } 
    
    elif test_or_prod_or_none=="":
        ...

        return  {
            "debug_and_allow_host" : (True,[]),
            "channel_layer" : get_channel_layer("mem").group_send,
            "test_bundle" : "0.1_GHS__100MB_(24hrs)",
            # "get_all_data_allocations" : get_all_data_allocations
            # "test_bundle" : "", #*
            "get_all_data_allocations" : ['3_GHS__2GB_(24hrs)', '5_GHS__5GB_(24hrs)', '10_GHS__15GB_(3_days)', '15_GHS__20GB_(5_days)', '30_GHS__(Unlimited_24hrs)'] #*


        }

timeout = 3

test_or_production_or_local = set_allowed_host_and_debug_mode("")

DEBUG,SET_ALLOWED_HOSTS = test_or_production_or_local["debug_and_allow_host"]
channel_layer = test_or_production_or_local["channel_layer"]
test_bundle = test_or_production_or_local["test_bundle"]
get_all_data_allocations = test_or_production_or_local["get_all_data_allocations"]



SITE_ID = 1



BACKEND_ROOT_PATH = f"{BASE_DIR}/backend"



ROOT_LOG_FOLDER = f"{BASE_DIR}/logs"
SUBFOLDER_OF_ROOT_LOG_FOLDER = f"{ROOT_LOG_FOLDER}/timed_file"

if Path(ROOT_LOG_FOLDER).exists() == False: #*
    mkdir(ROOT_LOG_FOLDER)
    mkdir(SUBFOLDER_OF_ROOT_LOG_FOLDER)






# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!


SECRET_KEY=SECRET_KEY

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True #*
DEBUG = DEBUG

ALLOWED_HOSTS = ["testserver","127.0.0.1","localhost"]
ALLOWED_HOSTS.extend(SET_ALLOWED_HOSTS)
print(DEBUG,ALLOWED_HOSTS)

# Application definition

INSTALLED_APPS = [
    'daphne',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'backend',
    "channels",
    "django.contrib.flatpages",
    'django.contrib.sites', 
    "django.contrib.admindocs"



]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.cache.UpdateCacheMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.cache.FetchFromCacheMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    # 'django.middleware.clickjacking.XFrameOptionsMiddleware', #*
    "django.contrib.flatpages.middleware.FlatpageFallbackMiddleware",
    "django.contrib.admindocs.middleware.XViewMiddleware",
    
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS':  [BASE_DIR / 'backend/templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'
ASGI_APPLICATION = 'core.asgi.application'



# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases


AUTH_USER_MODEL = 'backend.auth_users'
# DATABASE_ROUTERS = ["backend.db_routers.AuthRouter","backend.db_routers.TransactionsRouter"]

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3', #*
        'NAME': BASE_DIR / 'db.sqlite3',
        "ATOMIC_REQUESTS":True,
        "CONN_MAX_AGE":None,
        "CONN_HEALTH_CHECKS":True,
        "OPTIONS":{
            'timeout': 1800,
            "init_command":"PRAGMA analysis_limit = 1000;PRAGMA optimize;PRAGMA auto_vacuum = INCREMENTAL;PRAGMA incremental_vacuum;PRAGMA busy_timeout = 1;PRAGMA cache_size = 20000;PRAGMA cache_spill=False;PRAGMA cell_size_check = True;PRAGMA compile_options;PRAGMA freelist_count;PRAGMA integrity_check;PRAGMA journal_mode = WAL;PRAGMA locking_mode = NORMAL;PRAGMA page_count;PRAGMA page_size;PRAGMA pragma_list;PRAGMA quick_check;PRAGMA synchronous = NORMAL;PRAGMA stats;PRAGMA shrink_memory;PRAGMA threads = 10000;PRAGMA wal_autocheckpoint;PRAGMA wal_checkpoint(PASSIVE);",
            "transaction_mode": "IMMEDIATE"
        }

    },

    'backup_db': {

        'NAME': BASE_DIR / 'backup_db.sqlite3',

    },

    'postgres': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': POSTGRES_NAME,
        'USER': POSTGRES_USERNAME,
        'PASSWORD': POSTGRES_PASSWORD,
        'HOST': '127.0.0.1',
        'PORT': '5432',
    }

}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_PATH = f"{BACKEND_ROOT_PATH}/static"
MEDIA_PATH = f"{BACKEND_ROOT_PATH}/media"


if Path(STATIC_PATH).exists() == False:
    mkdir(STATIC_PATH)
    STATIC_ROOT = STATIC_PATH

STATIC_ROOT = STATIC_PATH

if Path(MEDIA_PATH).exists() == False:
    mkdir(MEDIA_PATH)
    MEDIA_ROOT = MEDIA_PATH

MEDIA_ROOT = MEDIA_PATH


STATIC_URL = 'static/'
MEDIA_URL="/media/"


STATICFILES_DIRS=[
    STATIC_ROOT
]

SILENCED_SYSTEM_CHECKS=[
    "staticfiles.E002"
]

FIXTURE_DIRS = [f"{BASE_DIR}\db"]



# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



# # # SESSIONS
# SESSION_COOKIE_DOMAIN=[f"https://{ALLOWED_HOSTS[len(ALLOWED_HOSTS)-1]}"]
# SESSION_COOKIE_DOMAIN=[ALLOWED_HOSTS[len(ALLOWED_HOSTS)-1]]
# SESSION_COOKIE_SECURE=True #*
# SESSION_ENGINE="django.contrib.sessions.backends.cache" #*
# SESSION_COOKIE_SAMESITE=None


# # # CORE SETTINGS
# CSRF_COOKIE_DOMAIN=[f"https://{ALLOWED_HOSTS[len(ALLOWED_HOSTS)-1]}"]
# CSRF_COOKIE_DOMAIN=[ALLOWED_HOSTS[len(ALLOWED_HOSTS)-1]]
CSRF_COOKIE_HTTPONLY=True #*
CSRF_COOKIE_SECURE=True #*
# CSRF_USE_SESSIONS=True #*
CSRF_TRUSTED_ORIGINS=[f"https://{ALLOWED_HOSTS[-1]}"]
# CSRF_COOKIE_SAMESITE=None #* 

CSRF_FAILURE_VIEW = TemplateView.as_view(template_name = "error.html")

ADMINS=ADMINS
MANAGERS=ADMINS

EMAIL_FILE_PATH=f"{BASE_DIR}/logs/email"
EMAIL_PORT=587
EMAIL_SUBJECT_PREFIX= EMAIL_SUBJECT_PREFIX
EMAIL_HOST="smtp.gmail.com"
DEFAULT_FROM_EMAIL= DEFAULT_FROM_EMAIL
EMAIL_HOST_USER= EMAIL_HOST_USER
EMAIL_HOST_PASSWORD= EMAIL_PASS_KEY_OR_PASSWORD
EMAIL_USE_TLS = True  # Set it to False if using SSL
SERVER_EMAIL= SERVER_EMAIL

FIRST_DAY_OF_WEEK="Monday"
# IGNORABLE_404_URLS=["favicon.ico","/static/images/ddsfavicon.ico","robots.txt"]
# LANGUAGE_COOKIE_NAME="dds-lang"
# PREPEND_WWW=True
# SECURE_HSTS_INCLUDE_SUBDOMAINS=True
# SECURE_HSTS_PRELOAD=True #*
# SECURE_HSTS_SECONDS=1000 #*
# SECURE_SSL_REDIRECT=True #*
# SECURE_REDIRECT_EXEMPT=[r'^http://ALLOWED_HOSTS/$'.replace("ALLOWED_HOSTS",ALLOWED_HOSTS[1])] #*
# SECURE_SSL_HOST=ALLOWED_HOSTS[len(ALLOWED_HOSTS)-1] #*

SECRET_KEY_FALLBACKS=[
    token_urlsafe(64)+token_hex(32),
    token_urlsafe(64).join(f"{token_bytes(16)}"),
    token_hex(32).join(f"{token_bytes(16)}"),
    token_urlsafe(64),
    token_hex(32),
    token_bytes(16),
]


LOGGING={
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {



        'filebased_mail': {
        'level': 'WARNING',
        'class': 'django.utils.log.AdminEmailHandler',
        'include_html': True,
        'email_backend': 'django.core.mail.backends.filebased.EmailBackend',
        "formatter":"verbose"
        },

        'mail_admins': {
        'level': 'WARNING',
        'class': 'django.utils.log.AdminEmailHandler',
        'include_html': True,
        'email_backend': 'django.core.mail.backends.smtp.EmailBackend',
        "formatter":"verbose"
        },

        'console': {
            'class': 'logging.StreamHandler',
            "level":"WARN",
            "formatter":"verbose"
        },



        'timed_file': {
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': f"{BASE_DIR}/logs/timed_file/timed_file.json",
            "when":'W6', 
            "interval":1, 
            "backupCount":2, 
            "encoding":"utf-8", 
            "delay":True, 
            "utc":False, 
            "atTime":None, 
            "errors":None,
            "level":"WARNING",
            "formatter":"verbose"
        }

    },

    'formatters': {
        'verbose': {
            'format': '{{ "name" : "{name}" , "levelname" : "{levelname}" , "lineno" : "{lineno}" , "pathname" : "{pathname}" , "asctime" : "{asctime}" , "module" : "{module}" , "process" : "{process:d}" , "thread" : "{thread:d}" , "message" : "{message}" }}\n',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        }
    },


    "loggers":{
        "django.request":{
            "handlers":[
                # "filebased_mail",
                # "mail_admins",
                "console",
                "timed_file",
            ],
        },
        "django.server":{
            "handlers":[
                # "filebased_mail",
                # "mail_admins",
                "console",
                "timed_file",
            ],
        },
        "django.template":{
            "handlers":[
                # "filebased_mail",
                # "mail_admins",
                "console",
                "timed_file",
            ],
        },
        "django.security.*":{
            "handlers":[
                # "filebased_mail",
                # "mail_admins",
                "console",
                "timed_file",
            ],
        },
        "django.security.csrf":{
            "handlers":[
                # "filebased_mail",
                # "mail_admins",
                "console",
                "timed_file",
            ],
        },
        "django.security.DisallowedHost":{
            "handlers":[
                "console",
                "timed_file",
            ],
        },

        'django': {
            'handlers': [
                # "filebased_mail",
                # "mail_admins",
                "console",
                "timed_file",
            ],
            # 'propagate': True,
        },




    }

}

# CACHES = {
#     'default': {
#         'BACKEND': 'django.core.cache.backends.memcached.PyMemcacheCache',
#         # 'LOCATION': [
#         #     "127.0.0.1:8001",
#         #     # "localhost:8002",
#         #     # "102.22.14.198:8000"
#         # ],
#         'OPTIONS': {
#             'no_delay': True,
#             'ignore_exc': True,
#             'max_pool_size': 4,
#             'use_pooling': True,
#         },
#         "LOCATION": "127.0.0.1:11211",
#     }
# }

if __name__=="__main__":
    ...
